import { camelCase, pascalCase } from 'case-anything'
import { deleteSync } from 'del'
import fs from 'fs-extra'
import path from 'path'
import { autoGeneratedWarning } from './helpers/autoGeneratedWarning.ts'
import { PATH_PEPICONS, PATH_VUE } from './helpers/filePathHelpers.ts'

export async function generateVueComponents() {
  const vueIconsFolder = path.join(PATH_VUE, 'src/icons')
  deleteSync(vueIconsFolder)
  fs.mkdirSync(vueIconsFolder)

  const types = ['pop', 'print', 'pencil'] as const
  const iconIndexGroupExports: string[] = []
  const iconIndexIndividualExports: string[] = []
  const iconsIndexPath = path.join(PATH_VUE, 'src/icons.ts')

  for (const type of types) {
    const dir = path.join(PATH_PEPICONS, 'src/icons', type)
    const typeIndexPath = path.resolve(PATH_VUE, `./src/icons/${type}/index.ts`)
    const typeIndexContent: string[] = []
    const icons: { name: string; type: string; componentName: string }[] = []

    for (const filename of fs.readdirSync(dir)) {
      if (filename === 'index.ts') continue

      const name = path.basename(filename, path.extname(filename))
      const componentName = pascalCase(type + '-' + name)
      const componentContent = generateComponentContent(name, type, componentName)
      const componentPath = path.join(PATH_VUE, 'src/icons', type, filename)

      fs.outputFileSync(componentPath, componentContent)

      typeIndexContent.push(`export { default as ${componentName} } from './${name}.ts'`)
      icons.push({ name, type, componentName })
    }

    fs.outputFileSync(typeIndexPath, prependWarning(typeIndexContent.join('\n')))
    iconIndexGroupExports.push(`export * as ${type}Icons from './icons/${type}/index.ts'`)
    iconIndexIndividualExports.push(
      ...icons.map(
        ({ type, componentName, name }) =>
          `export { default as ${componentName} } from './icons/${type}/${name}.ts'`,
      ),
    )
  }

  fs.outputFileSync(
    iconsIndexPath,
    prependWarning(
      [iconIndexGroupExports.join('\n'), iconIndexIndividualExports.join('\n')].join('\n\n'),
    ),
  )
}

function generateComponentContent(name: string, type: string, componentName: string) {
  /**
   * TODO: For some reason the following won't work:
   * ```js
   * `import { ${camelCase(name)} } from 'pepicons/${type}'`
   * ```
   * Try tweaking the content to the above and then:
   * ```
   * npm run build
   * ```
   */
  return prependWarning(`import { defineComponent } from 'vue'
import { ${camelCase(name)} } from 'pepicons/${type}'
import { baseProps, createSetup } from '../../component.ts'

export default defineComponent({
  name: '${componentName}',
  props: {...baseProps},
  setup: createSetup(${camelCase(name)}, '${type}')
})
`).trim()
}

function prependWarning(str) {
  return `${autoGeneratedWarning}

${str}`
}
