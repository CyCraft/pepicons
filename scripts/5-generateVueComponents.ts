import { camelCase, pascalCase } from 'case-anything'
import { deleteSync } from 'del'
import fs from 'fs-extra'
import path from 'path'
import { autoGeneratedWarning } from './helpers/autoGeneratedWarning.ts'
import { PATH_PEPICONS, PATH_VUE } from './helpers/filePathHelpers.ts'

export async function generateVueComponents() {
  const vueIconsFolder = path.join(PATH_VUE, 'src/icons')
  deleteSync(vueIconsFolder)
  fs.mkdirSync(vueIconsFolder)

  const types = ['pop', 'print', 'pencil'] as const

  const iconNames: string[] = []
  for (const filename of fs.readdirSync(path.join(PATH_PEPICONS, 'src/icons/pop'))) {
    if (filename === 'index.ts') continue

    const name = path.basename(filename, path.extname(filename))
    iconNames.push(name)
  }
  iconNames.sort()

  for (const type of types) {
    const icons = iconNames.map((name) => ({ name, type }))

    for (const { name, type } of icons) {
      const componentContent = generateComponentContent(name, type)
      const componentPath = path.join(PATH_VUE, 'src/icons', type, name + '.ts')

      fs.outputFileSync(componentPath, componentContent)
    }

    fs.outputFileSync(
      path.resolve(PATH_VUE, `./src/icons/${type}/index.ts`),
      prependWarning(
        iconNames
          .map((name) => `export { default as ${pascalCase(name)} } from './${name}.ts'`)
          .join('\n'),
      ),
    )
  }

  fs.outputFileSync(
    path.join(PATH_VUE, 'src/icons.ts'),
    prependWarning(
      [
        types.map((type) => `export * as ${type}Icons from './icons/${type}/index.ts'`).join('\n'),
        types
          .map((type) =>
            iconNames
              .map(
                (name) =>
                  `export { default as ${pascalCase(
                    type + '-' + name,
                  )} } from './icons/${type}/${name}.ts'`,
              )
              .join('\n'),
          )
          .join('\n\n'),
      ].join('\n\n'),
    ),
  )
}

function generateComponentContent(name: string, type: string) {
  /**
   * TODO: For some reason the following won't work:
   * ```js
   * `import { ${camelCase(name)} } from 'pepicons/${type}'`
   * ```
   * Try tweaking the content to the above and then:
   * ```
   * npm run build
   * ```
   */
  return prependWarning(`import { defineComponent } from 'vue'
import { ${camelCase(name)} } from 'pepicons/${type}'
import { baseProps, createSetup } from '../../component.ts'

export default defineComponent({
  name: '${pascalCase(name)}',
  props: {...baseProps},
  setup: createSetup(${camelCase(name)}, '${type}')
})`)
}

function prependWarning(str: string): string {
  return `${autoGeneratedWarning}

${str}
`
}
