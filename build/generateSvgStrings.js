const fs = require('fs')
const rimraf = require('rimraf')
const copyfiles = require('copyfiles')
const Renamer = require('renamer')
const renamer = new Renamer()
const debounce = require('debounce')
const replace = require('replace-in-file')
const sort = require('fast-sort')
const { filePathToIconName, filePathToIconSynonyms, filePathToIconCategory } = require('./utils.js')
const listFiles = require('./_listFiles.js')
const { pascalCase } = require('case-anything')

const PATH_PEPICONS = './packages/pepicons'

const nextTick = () => new Promise((resolve) => setTimeout(resolve, 100))

const deleteIconsFolder = () =>
  new Promise((resolve, reject) => {
    rimraf(PATH_PEPICONS + '/src/icons', resolve)
  })

const copyPopSvgs = () =>
  new Promise((resolve, reject) => {
    const from = PATH_PEPICONS + '/svg/pop/*.svg'
    const to = PATH_PEPICONS + '/src/icons/'
    copyfiles([from, to], { up: 3 }, resolve)
  })

const copyPrintSvgs = () =>
  new Promise((resolve, reject) => {
    const from = PATH_PEPICONS + '/svg/print/*.svg'
    const to = PATH_PEPICONS + '/src/icons/'
    copyfiles([from, to], { up: 3 }, resolve)
  })

const renameSvgsToTs = () =>
  new Promise((resolve, reject) => {
    renamer.on('replace-result', (replaceResult) => {
      debounce(resolve, 200)()
    })
    const path = PATH_PEPICONS + '/src/icons/**/*.svg'
    renamer.rename({
      files: [path],
      find: '.svg',
      replace: '.ts',
    })
  })

const formatToExportSvgString = () =>
  new Promise((resolve, reject) => {
    const path = PATH_PEPICONS + '/src/icons/**/*.ts'
    replace({
      files: path,
      from: /([\S\s]+)\n*/g,
      to: (...args) => `export default \`${args[1]}\`\n`,
    })
      .then(resolve)
      .catch(reject)
  })

const autoGeneratedWarning = `/** Do not edit! This file is auto-generated. */`

/**
 * @param {'pop' | 'print' | 'synonyms' | 'categories' | 'types'} kind
 */
const filesArrayToExportFileContents = (kind = 'pop', iconNameFilePathEntries = []) => {
  const importTypePepicon =
    kind === 'print'
      ? `import { PepiconPrint } from '../types'`
      : kind === 'pop' || kind === 'synonyms'
      ? `import { Pepicon } from '../types'`
      : `import { Pepicon } from './types'`

  if (kind === 'pop' || kind === 'print') {
    const importName = pascalCase

    // imports
    const importStatements = iconNameFilePathEntries.map(([iconName, filePath]) => {
      const path = filePathToIconName(filePath) // prettier-ignore
      return `import ${importName(iconName)} from './${kind}/${path}'\n`
    })
    const _import = importStatements.join('')

    // exports
    const svgStringProps = iconNameFilePathEntries
      .map(([iconName]) => `  '${iconName}': ${importName(iconName)},\n`)
      .join('')

    const _export =
      kind === 'print'
        ? `export const ${kind}: { [name in PepiconPrint]: string } = {\n${svgStringProps}}`
        : `export const ${kind}: { [name in Pepicon]: string } = {\n${svgStringProps}}`
    // all together
    return `${autoGeneratedWarning}\n\n${importTypePepicon}\n\n${_import}\n\n${_export}\n`
  }

  if (kind === 'types') {
    const pepiconType = iconNameFilePathEntries.map(([iconName]) => `'${iconName}'`).join(' | ')
    const pepiconPrintType = `Exclude<Pepicon, ${iconNameFilePathEntries
      .flatMap(([iconName]) => (iconName.endsWith('-filled') ? `'${iconName}'` : []))
      .join(' | ')}>`
    return [
      `${autoGeneratedWarning}\n\n`,
      `export type Pepicon = ${pepiconType}\n\n`,
      `export type PepiconPrint = ${pepiconPrintType}\n`,
    ].join('')
  }

  if (kind === 'categories') {
    const allCategories = new Set()
    const categoryProps = iconNameFilePathEntries
      .map(([iconName, filePath]) => {
        allCategories.add(filePathToIconCategory(filePath))
        return `  '${iconName}': '${filePathToIconCategory(filePath)}',\n`
      })
      .join('')
    const categories = (() => {
      const cats = [...allCategories]
      sort(cats).desc()
      return `export const categories: { [name in Pepicon]: string } = {\n${categoryProps}}`
    })()
    const pepiconCategoryDic = `export const pepiconCategoryDic: { [name in Pepicon]: string } = {\n${categoryProps}}`
    return [
      `${autoGeneratedWarning}\n\n`,
      `${importTypePepicon}\n\n`,
      `${categories}\n\n`,
      `${pepiconCategoryDic}\n`,
    ].join('')
  }

  if (kind === 'synonyms') {
    const iconSynonymArray = filePath => `[${filePathToIconSynonyms(filePath).map(s => `'${s}'`).join(', ')}]` // prettier-ignore
    const synonymProps = iconNameFilePathEntries
      .map(([iconName, filePath]) => `  '${iconName}': ${iconSynonymArray(filePath)},\n`)
      .join('')
    return `${autoGeneratedWarning}\n\n${importTypePepicon}\n\nexport const synonyms: { [name in Pepicon]: string[] } = {\n${synonymProps}}\n`
  }
}

/**
 * @param {'pop' | 'print' | 'synonyms' | 'categories' | 'types'} kind
 */
const generateExportsFile = async (kind = 'pop', iconNameFilePathEntries = []) => {
  const content = filesArrayToExportFileContents(kind, iconNameFilePathEntries)
  const path =
    kind === 'pop' || kind === 'print'
      ? PATH_PEPICONS + `/src/icons/${kind}.ts`
      : kind === 'synonyms'
      ? PATH_PEPICONS + `/src/synonyms/en.ts`
      : PATH_PEPICONS + `/src/${kind}.ts`
  fs.writeFileSync(path, content)
}

/**
 * @param {'pop' | 'print'} kind
 */
const getIconNameFilePathEntries = async (kind = 'pop') => {
  const regex = new RegExp(`.+${kind}\/.+\.svg`, 'gi')
  const files = await listFiles(PATH_PEPICONS + `/exportFromSketch/`, regex)
  const iconNameFilePathEntries = files.map((filePath) => [
    filePathToIconName(filePath),
    filePath.split('/').slice(-2).join('/'), // prettier-ignore
  ])
  sort(iconNameFilePathEntries).asc((entry) => entry[0])
  return iconNameFilePathEntries
}

const generateIndexFiles = async () => {
  const iconNameFilePathEntries__pop = await getIconNameFilePathEntries('pop')
  const iconNameFilePathEntries__print = await getIconNameFilePathEntries('print')
  // write several required files
  await Promise.all([
    generateExportsFile('pop', iconNameFilePathEntries__pop),
    generateExportsFile('print', iconNameFilePathEntries__print),
    generateExportsFile('types', iconNameFilePathEntries__pop),
    generateExportsFile('categories', iconNameFilePathEntries__pop),
    generateExportsFile('synonyms', iconNameFilePathEntries__pop),
  ])
  // write one more index file
  const path = PATH_PEPICONS + '/src/index.ts'
  const content = [
    `${autoGeneratedWarning}\n\n`,
    `export { Pepicon, PepiconPrint } from './types'\n`,
    `export { categories, pepiconCategoryDic } from './categories'\n`,
    `export { synonyms } from './synonyms/en'\n`,
    `export { synonyms as synonymsJa } from './synonyms/ja'\n`,
    `export * from './icons/pop'\n`,
    `export * from './icons/print'\n`,
  ].join('')
  fs.writeFileSync(path, content)
}

module.exports = async function generateSvgStrings() {
  await deleteIconsFolder()
  await copyPopSvgs()
  await copyPrintSvgs()
  await renameSvgsToTs()
  await formatToExportSvgString()
  await generateIndexFiles()
}
